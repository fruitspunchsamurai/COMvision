/*
Singapore Polytechnic
Singapore Autonomous Underwater Vehicle Challenge 2014
Computer Vision System
Version : PRE ALPHA
*/

//Include Libraries
#include <iostream>
#include <vector>
#include <stdio.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/opencv.hpp>

//Declarations
using namespace cv;
int state = 0;
int ballrelease = 0;
int count = 0;

int main(int, char**)
{
    //SETUP
    FILE *pf;
    pf = fopen("results.txt","w");
    //Initialise Bottom Camera
    VideoCapture cambottom(0); 
    if(!cambottom.isOpened()) //Checking sequence 
    {
        return -1;
    }
    cambottom.set(CV_CAP_PROP_FRAME_WIDTH, 320);
    cambottom.set(CV_CAP_PROP_FRAME_HEIGHT, 240);
    //Initialise Front Camera
    VideoCapture camfront(1);
    if(!camfront.isOpened()) //Checking sequence
    {
        return -1;
    }
    camfront.set(CV_CAP_PROP_FRAME_WIDTH, 320);
    camfront.set(CV_CAP_PROP_FRAME_HEIGHT, 240);
    
    Mat hsvbottom;
    Mat hsvbottomblack;
    Mat hsvbootomred;
    Mat hsvfront;
    CvMoments hsvblackMoment;
    CvMoments hsvyellowMoment;
    CvMoments hsvredMoment;
    namedWindow("Original Frame (Bottom)",1);
    namedWindow("HSV Frame (Bottom)",1);
    namedWindow("Original Frame (Front)",1);
    namedWindow("HSV Frame (Front)",1);
    while(1)
    {
        if (state == 0)
        {
            Mat framebottom;
            cambottom >> framebottom; // Get a new frame from camera
            GaussianBlur(framebottom, framebottom, Size(7,7), 1.5, 1.5);
            cvtColor(framebottom, hsvbottom, CV_BGR2HSV);
            //Black
            inRange(hsvbottom, Scalar(0, 0, 0), Scalar(102, 194, 30),hsvbottomblack);
            hsvblackMoment = moments(hsvbottomblack);
            double moment10 = cvGetSpatialMoment(&hsvblackMoment, 1, 0); //X coordinates
            double moment01 = cvGetSpatialMoment(&hsvblackMoment, 0, 1); //Y coordinates
            double area = cvGetCentralMoment(&hsvblackMoment, 0, 0); //Sum of all white color pixels
            // if the area<1000, then it's probably not wanted
            if(area>1000)
            {
                // calculate the position of the ball
                int posX = moment10/area;
                int posY = moment01/area;
                posX = posX - 160;
                posY = -(posY - 120);
                circle(framebottom,cvPoint(posX,posY),5,cvScalar(0,255,255),4);
                printf("[Black] X Coordinate = %d. Y Coordinate = %d.\n", posX,posY);
                fprintf(pf,"[Black] X Coordinate = %d. Y Coordinate = %d.\n", posX,posY);
            }
            //Red
            inRange(hsvbottom, Scalar(0, 70, 100), Scalar(5, 255, 255),hsvbottomred);
            hsvredMoment = moments(hsvbottomred);
            double moment10 = cvGetSpatialMoment(&hsvredMoment, 1, 0); //X coordinates
            double moment01 = cvGetSpatialMoment(&hsvredMoment, 0, 1); //Y coordinates
            double area = cvGetCentralMoment(&hsvredMoment, 0, 0); //Sum of all white color pixels
            // if the area<1000, then it's probably not wanted
            if(area>1000)
            {
                // calculate the position of the ball
                int posX = moment10/area;
                int posY = moment01/area;
                posX = posX - 160;
                posY = -(posY - 120);
                circle(framebottom,cvPoint(posX,posY),5,cvScalar(255,255,255),4);
                printf("[Red] X Coordinate = %d. Y Coordinate = %d.\n", posX,posY);
                fprintf(pf,"[Red] X Coordinate = %d. Y Coordinate = %d.\n", posX,posY);
                if (area>60000)
                {
                    state = 1;
                {
            }
            imshow("Original Frame (Bottom)", framebottom);
            imshow("[Black] Thresholded Frame (Bottom)", hsvbottomblack);
            imshow("[Red] Thresholded Frame (Bottom)", hsvbottomred);
            if(waitKey(30) >= 0) break;
        }
        
        else
        {
            if (state == 1)
            {
                Mat framefront;
                camfront >> framefront; // Get a new frame from camera
                GaussianBlur(framefront, framefront, Size(7,7), 1.5, 1.5);
                cvtColor(framefront, hsvfront, CV_BGR2HSV);
                inRange(hsvfront, Scalar(17, 90, 90), Scalar(40, 255, 255),hsvfront);
                hsvyellowMoment = moments(hsvfront);
                double moment10 = cvGetSpatialMoment(&hsvyellowMoment, 1, 0); //X coordinates
                double moment01 = cvGetSpatialMoment(&hsvyellowMoment, 0, 1); //Y coordinates
                double area = cvGetCentralMoment(&hsvyellowMoment, 0, 0); //Sum of all white color pixels
                // if the area<500, then it's probably not wanted.
                if(area>500)
                {
                    // calculate the position of the ball
                    int posX = moment10/area;
                    int posY = moment01/area;
                    posX = posX - 160;
                    posY = -(posY - 120);
                    circle(framefront,cvPoint(posX,posY),5,cvScalar(0,0,0),4);
                    printf("[Yellow] X Coordinate = %d. Y Coordinate = %d.\n", posX,posY);
                    fprintf(pf,"[Yellow] X Coordinate = %d. Y Coordinate = %d.\n", posX,posY);
                }
                imshow("Original Frame (Front)", framefront);
                imshow("Thresholded Frame (Front)", hsvfront);
                if(waitKey(30) >= 0) break;
            }
        }
    }
    // the camera will be deinitialized automatically in VideoCapture destructor
    return 0;
}
